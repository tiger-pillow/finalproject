# with NA (Not Available) for now.
node_values = c( geoData$wingL, rep(NA, n_tips-1) )
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 )
wing_ancestral =
ace(
geoData$wingL,
geoTree,
type="continuous",
method="REML",
model="BM"
)
wing_ancestral
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( geoData$wingL, wing_ancestral$ace )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values_pic), nudge_x = 0.02, size = 8) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( geoData$wingL, wing_ancestral$ace )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values), nudge_x = 0.02, size = 8) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( geoData$wingL, wing_ancestral$ace )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values), nudge_x = 0.02, size = 1) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( geoData$wingL, wing_ancestral$ace )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values), nudge_x = 0.02, size = 3) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( geoData$wingL, round(wing_ancestral$ace, digits = 2) )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values), nudge_x = 0.02, size = 3) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( geoData$wingL, round(wing_ancestral$ace, digits = 2) )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values), nudge_y = 0.2, size = 3) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
# To display the node values, ggtree expects a vector where each element
# corresponds to each node in the tree, both at the tips and at the internal
# nodes. Since we don't have values for the internal nodes, we will pad them
# with NA (Not Available) for now.
node_values = c( round(geoData$wingL, digits = 2), round(wing_ancestral$ace, digits = 2) )
node_values
geo_ggtree +
geom_tippoint( aes(color=node_values), size=3, alpha=1 ) +
geom_text2(aes(label = node_values), nudge_y = 0.2, size = 3) +
geom_nodepoint(  aes(color=node_values), size=3, alpha=1 )
install.packages("rmarkdown")
install.packages("rmarkdown")
cleaer
litter_ancestral
litter_ancestral
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
library(tidyverse)
library(magrittr)
tree_global = read.tree('RAxML_bipartitions.result_FIN4_raw_rooted_wBoots_4098mam1out_OK.newick')
n_tips = length(tree_global$tip.label)
root_node = tree_global$edge[(!tree_global$edge[,1] %in% tree_global$edge[,2]),1] %>% unique()
root_age = max( dist.nodes(tree_global)[,root_node] )
label_offset = 0.02 * root_age
tree_width = 5 * root_age
## drop all the non-relevant tips
charstate = read.csv('1128_Completedata.csv')
charstate
charstate = charstate%>%mutate(Average = as.numeric(Average))
tips <- tree_global$tip.label
tips_short = str_replace(tips, "[A-Z_]+$", "")
tree_global$tip.label = tips_short
tip_names = data.frame(Name_long=tips, Name=tips_short)
charstate %<>% left_join(tip_names)
missing_in_charstate = tree_global$tip.label[! tree_global$tip.label %in% charstate$Name]
tree_global = ape::drop.tip(tree_global, missing_in_charstate)
charstate %<>% filter(!is.na(Name_long))
rank <- match( charstate[,1], tree_global$tip.label )
charstate = charstate[match( tree_global$tip.label, charstate[,1] ), ] #the data order matches, checked manually as well.
if(! all( charstate[,1] ==tree_global$tip.label ) ){
stop("Error: tip labels and dataframe rows not in same order!")
}
litter_ancestral =
ace(
charstate$Average,
tree_global,
type = "continuous",
method = "REML",
model = "BM"
)
node_values = c(charstate$Average, round(litter_ancestral$ace, digits= 2)) # datastructure for plotting the tips
#for clade
MRCA_dipodidae = getMRCA(tree_global, c("Zapus_princeps", "Sicista_tianshanica"))
MRCA_muridae = getMRCA(tree_global, c("Spalax_microphthalmus","Melanomys_caliginosus"))
MRCA_anomaluridae = getMRCA(tree_global, c("Anomalurus_beecrofti", "Idiurus_macrotis"))
MRCA_pedetidae = getMRCA(tree_global, c("Pedetes_capensis", "Pedetes_surdaster"))
MRCA_geomyidae = getMRCA(tree_global, c("Geomys_texensis", "Thomomys_talpoides"))
MRCA_heteromyidae = getMRCA(tree_global, c("Heteromys_oresterus", "Dipodomys_phillipsii"))
MRCA_hystricognathi = getMRCA(tree_global, c("Thryonomys_swinderianus", "Cavia_tschudii"))
MRCA_castoridae = getMRCA(tree_global, c("Castor_canadensis", "Castor_fiber"))
MRCA_ctenodactylidae = getMRCA(tree_global, c("Ctenodactylus_gundi", "Massoutiera_mzabi"))
MRCA_sciuridae = getMRCA(tree_global, c("Tamiasciurus_mearnsi", "Ratufa_bicolor"))
MRCA_aplodontidae = getMRCA(tree_global, c("Aplodontia_rufa", "Aplodontia_rufa"))
MRCA_gliridae = getMRCA(tree_global, c("Glirulus_japonicus", "Dryomys_nitedula"))
#for highlight
MRCA_acomys = getMRCA(tree_global, c("Acomys_cahirinus", "Acomys_spinosissimus"))
MRCA_mus = getMRCA(tree_global, c("Mus_pahari", "Mus_tenellus"))
MRCA_rattus = getMRCA(tree_global, c("Rattus_exulans", "Rattus_praetor"))
globaltree = ggtree(tree_global, layout = 'circular' ) +
geom_tiplab( fontface = "italic", size= 1.5, offset = 0.01) +
xlim(0, 1.2) +
geom_text2(aes(label = node_values), nudge_x = 0.01, size = 1.5) +
geom_tippoint(aes(color=node_values), size= 1.5, alpha= 0.8 ) +
geom_nodepoint( aes(color=node_values), size= 1.5, alpha= 0.8 ) +
scale_color_gradientn(colours = rainbow(3)) +
theme(legend.text=element_text(size= 40),
legend.title=element_text(size=60),
legend.key.size= unit(3,"cm"),
legend.position= "top") +
geom_cladelabel(node=MRCA_muridae, label="Muridae", offset = 0.05, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_dipodidae, label="Dipodidae", offset = 0.1, fontsize = 8, color = "blue",barsize = 1.5) +
geom_cladelabel(node=MRCA_anomaluridae, label="Anomaluridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_pedetidae, label="Pedetidae", offset = 0.12, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_heteromyidae, label="Heteromyidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_hystricognathi, label="Hystricognathi", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_sciuridae, label="Sciuridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_gliridae, label="Gliridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_castoridae, label="Castoridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_ctenodactylidae, label="Ctenodactylidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_acomys, label="Acomys", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_mus, label="Mus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_rattus, label="Rattus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5)
globaltree
##### The following are for pic method, not sure to include or not
litter_ancestral_pic =
ace(
charstate$Average,
tree_global,
type = "continuous",
method = "pic",
model = "BM"
)
node_values_pic = c(charstate$Average, round(litter_ancestral_pic$ace, digits= 2))
globaltree_pic = ggtree(tree_global, layout = 'circular' ) +
geom_tiplab( fontface = "italic", size= 1.5, offset = 0.01) +
xlim(0, 1.2) +
geom_text2(aes(label = node_values_pic), nudge_x = 0.01, size = 1.5) +
geom_tippoint(aes(color=node_values_pic), size= 1.5, alpha= 0.8 ) +
geom_nodepoint( aes(color=node_values_pic), size= 1.5, alpha= 0.8 ) +
scale_color_gradientn(colours = rainbow(3)) +
theme(legend.text=element_text(size= 40),
legend.title=element_text(size=60),
legend.key.size= unit(3,"cm"),
legend.position= "top") +
geom_cladelabel(node=MRCA_muridae, label="Muridae", offset = 0.05, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_dipodidae, label="Dipodidae", offset = 0.1, fontsize = 8, color = "blue",barsize = 1.5) +
geom_cladelabel(node=MRCA_anomaluridae, label="Anomaluridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_pedetidae, label="Pedetidae", offset = 0.12, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_heteromyidae, label="Heteromyidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_hystricognathi, label="Hystricognathi", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_sciuridae, label="Sciuridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_gliridae, label="Gliridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_castoridae, label="Castoridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_ctenodactylidae, label="Ctenodactylidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_acomys, label="Acomys", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_mus, label="Mus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_rattus, label="Rattus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5)
globaltree_pic
litter_ancestral
View(charstate)
litter_ancestral
View(litter_ancestral)
View(litter_ancestral)
View(litter_ancestral)
View(litter_ancestral)
litter_ancestral
View(litter_ancestral)
View(litter_ancestral)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
library(tidyverse)
library(magrittr)
D_methods = data.frame(
reml = litter_ancestral$ace,
pic = litter_ancestral_pic$ace
)
# Add node numbers to the data frame
D_methods$node = seq(1:nrow(D_methods)) + n_tips
D_methods %>%
ggplot(aes(x = reml,y = pic)) +
geom_point() +
geom_text(aes(label = node), color = "red", vjust = 0, nudge_y = 0.005) +
geom_abline(slope = 1, intercept = 0, color = "blue")
# Add confidence intervals to dataframe
D_methods$CI_reml_lower <- litter_ancestral$CI95[,1]
D_methods$CI_reml_upper <- litter_ancestral$CI95[,2]
D_methods$CI_pic_lower <- litter_ancestral_pic$CI95[,1]
D_methods$CI_pic_upper <- litter_ancestral_pic$CI95[,2]
# print in table
kable(D_methods)
D_methods = data.frame(
reml = litter_ancestral$ace,
pic = litter_ancestral_pic$ace
)
# Add node numbers to the data frame
D_methods$node = seq(1:nrow(D_methods)) + n_tips
D_methods %>%
ggplot(aes(x = reml,y = pic)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "blue")
#  geom_text(aes(label = node), color = "red", vjust = 0, nudge_y = 0.005) +
# Add confidence intervals to dataframe
D_methods$CI_reml_lower <- litter_ancestral$CI95[,1]
D_methods$CI_reml_upper <- litter_ancestral$CI95[,2]
D_methods$CI_pic_lower <- litter_ancestral_pic$CI95[,1]
D_methods$CI_pic_upper <- litter_ancestral_pic$CI95[,2]
# print in table
kable(D_methods)
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate$Average)), interval_width )
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(litter_ancestral$ace)), interval_width )
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
geo_ggtree +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
# Compare PIC with REML
D_methods = data.frame(
reml = litter_ancestral$ace,
pic = litter_ancestral_pic$ace
)
# Add node numbers to the data frame
D_methods$node = seq(1:nrow(D_methods)) + n_tips
D_methods %>%
ggplot(aes(x = reml,y = pic)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "blue")
#  geom_text(aes(label = node), color = "red", vjust = 0, nudge_y = 0.005) +
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
globaltree +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = circular) +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree
interval_width_pic = litter_ancestral_pic$CI95[,2] - litter_ancestral_pic$CI95[,1]
node_values_3 = c( rep(NA, nrow(charstate)), interval_width_pic )
kable( data.frame( node = seq(1, length(node_values_3)), width=node_values_3 ) )
intervaltree_pic = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree_pic
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
library(tidyverse)
library(magrittr)
tree_global = read.tree('RAxML_bipartitions.result_FIN4_raw_rooted_wBoots_4098mam1out_OK.newick')
n_tips = length(tree_global$tip.label)
root_node = tree_global$edge[(!tree_global$edge[,1] %in% tree_global$edge[,2]),1] %>% unique()
root_age = max( dist.nodes(tree_global)[,root_node] )
label_offset = 0.02 * root_age
tree_width = 5 * root_age
## drop all the non-relevant tips
charstate = read.csv('1128_Completedata.csv')
charstate
charstate = charstate%>%mutate(Average = as.numeric(Average))
tips <- tree_global$tip.label
tips_short = str_replace(tips, "[A-Z_]+$", "")
tree_global$tip.label = tips_short
tip_names = data.frame(Name_long=tips, Name=tips_short)
charstate %<>% left_join(tip_names)
missing_in_charstate = tree_global$tip.label[! tree_global$tip.label %in% charstate$Name]
tree_global = ape::drop.tip(tree_global, missing_in_charstate)
charstate %<>% filter(!is.na(Name_long))
rank <- match( charstate[,1], tree_global$tip.label )
charstate = charstate[match( tree_global$tip.label, charstate[,1] ), ] #the data order matches, checked manually as well.
if(! all( charstate[,1] ==tree_global$tip.label ) ){
stop("Error: tip labels and dataframe rows not in same order!")
}
litter_ancestral =
ace(
charstate$Average,
tree_global,
type = "continuous",
method = "REML",
model = "BM"
)
node_values = c(charstate$Average, round(litter_ancestral$ace, digits= 2)) # datastructure for plotting the tips
#for clade
MRCA_dipodidae = getMRCA(tree_global, c("Zapus_princeps", "Sicista_tianshanica"))
MRCA_muridae = getMRCA(tree_global, c("Spalax_microphthalmus","Melanomys_caliginosus"))
MRCA_anomaluridae = getMRCA(tree_global, c("Anomalurus_beecrofti", "Idiurus_macrotis"))
MRCA_pedetidae = getMRCA(tree_global, c("Pedetes_capensis", "Pedetes_surdaster"))
MRCA_geomyidae = getMRCA(tree_global, c("Geomys_texensis", "Thomomys_talpoides"))
MRCA_heteromyidae = getMRCA(tree_global, c("Heteromys_oresterus", "Dipodomys_phillipsii"))
MRCA_hystricognathi = getMRCA(tree_global, c("Trichys_fasciculata", "Cavia_tschudii"))
MRCA_castoridae = getMRCA(tree_global, c("Castor_canadensis", "Castor_fiber"))
MRCA_ctenodactylidae = getMRCA(tree_global, c("Ctenodactylus_gundi", "Massoutiera_mzabi"))
MRCA_sciuridae = getMRCA(tree_global, c("Tamiasciurus_mearnsi", "Ratufa_bicolor"))
MRCA_aplodontidae = getMRCA(tree_global, c("Aplodontia_rufa", "Aplodontia_rufa"))
MRCA_gliridae = getMRCA(tree_global, c("Glirulus_japonicus", "Dryomys_nitedula"))
#for highlight
MRCA_acomys = getMRCA(tree_global, c("Acomys_cahirinus", "Acomys_spinosissimus"))
MRCA_mus = getMRCA(tree_global, c("Mus_pahari", "Mus_tenellus"))
MRCA_rattus = getMRCA(tree_global, c("Rattus_exulans", "Rattus_praetor"))
globaltree = ggtree(tree_global, layout = 'circular' ) +
geom_tiplab( fontface = "italic", size= 1.5, offset = 0.005) +
xlim(0, 1.2) +
geom_text2(aes(label = node_values), nudge_x = 0.005, size = 1.5) +
geom_tippoint(aes(color=node_values), size= 1.5, alpha= 0.8 ) +
geom_nodepoint( aes(color=node_values), size= 1.5, alpha= 0.8 ) +
scale_color_gradientn(colours = rainbow(3)) +
theme(legend.text=element_text(size= 40),
legend.title=element_text(size=60),
legend.key.size= unit(3,"cm"),
legend.position= "top") +
geom_cladelabel(node=MRCA_muridae, label="Muridae", offset = 0.05, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_dipodidae, label="Dipodidae", offset = 0.1, fontsize = 8, color = "blue",barsize = 1.5) +
geom_cladelabel(node=MRCA_anomaluridae, label="Anomaluridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_pedetidae, label="Pedetidae", offset = 0.12, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_heteromyidae, label="Heteromyidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_geomyidae, label="Geomyidae", offset = 0.05, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_hystricognathi, label="Hystricognathi", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_sciuridae, label="Sciuridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_gliridae, label="Gliridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_castoridae, label="Castoridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_ctenodactylidae, label="Ctenodactylidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_acomys, label="Acomys", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_mus, label="Mus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_rattus, label="Rattus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5)
globaltree
##### The following are for pic method, not sure to include or not
litter_ancestral_pic =
ace(
charstate$Average,
tree_global,
type = "continuous",
method = "pic",
model = "BM"
)
node_values_pic = c(charstate$Average, round(litter_ancestral_pic$ace, digits= 2))
globaltree_pic = ggtree(tree_global, layout = 'circular' ) +
geom_tiplab( fontface = "italic", size= 1.5, offset = 0.01) +
xlim(0, 1.2) +
geom_text2(aes(label = node_values_pic), nudge_x = 0.01, size = 1.5) +
geom_tippoint(aes(color=node_values_pic), size= 1.5, alpha= 0.8 ) +
geom_nodepoint( aes(color=node_values_pic), size= 1.5, alpha= 0.8 ) +
scale_color_gradientn(colours = rainbow(3)) +
theme(legend.text=element_text(size= 40),
legend.title=element_text(size=60),
legend.key.size= unit(3,"cm"),
legend.position= "top") +
geom_cladelabel(node=MRCA_muridae, label="Muridae", offset = 0.05, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_dipodidae, label="Dipodidae", offset = 0.1, fontsize = 8, color = "blue",barsize = 1.5) +
geom_cladelabel(node=MRCA_anomaluridae, label="Anomaluridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_pedetidae, label="Pedetidae", offset = 0.12, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_heteromyidae, label="Heteromyidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5 ) +
geom_cladelabel(node=MRCA_hystricognathi, label="Hystricognathi", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_sciuridae, label="Sciuridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_gliridae, label="Gliridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_castoridae, label="Castoridae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_ctenodactylidae, label="Ctenodactylidae", offset = 0.1, fontsize = 8, color = "blue", barsize = 1.5) +
geom_cladelabel(node=MRCA_acomys, label="Acomys", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_mus, label="Mus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5) +
geom_cladelabel(node=MRCA_rattus, label="Rattus", offset = 0.02, fontsize = 8, color = "red", barsize = 1.5)
globaltree_pic
# Compare PIC with REML
D_methods = data.frame(
reml = litter_ancestral$ace,
pic = litter_ancestral_pic$ace
)
# Add node numbers to the data frame
D_methods$node = seq(1:nrow(D_methods)) + n_tips
D_methods %>%
ggplot(aes(x = reml,y = pic)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "blue")
#  geom_text(aes(label = node), color = "red", vjust = 0, nudge_y = 0.005) +
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree
interval_width_pic = litter_ancestral_pic$CI95[,2] - litter_ancestral_pic$CI95[,1]
node_values_3 = c( rep(NA, nrow(charstate)), interval_width_pic )
kable( data.frame( node = seq(1, length(node_values_3)), width=node_values_3 ) )
intervaltree_pic = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree_pic
kable(litter_ancestral$CI95[1:10], col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, 3, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, 3, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, 820:830, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, c(820:830), col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, 820:830, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, 820, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95, 1:10, col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95[, 1:10], col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95[, 1:10], col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95[, 1:10], col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95[, 820:830], col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95[, 5], col.names = c('lower bound', 'upper bound'))
kable(litter_ancestral$CI95[1:10, ], col.names = c('lower bound', 'upper bound'))
interval_width = litter_ancestral$CI95[,2] - litter_ancestral$CI95[,1]
node_values_2 = c( rep(NA, nrow(charstate)), interval_width )
kable( data.frame( node = seq(1, length(node_values_2)), width=node_values_2 ) )
intervaltree = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_2), size=3, alpha=1 )
intervaltree
interval_width_pic = litter_ancestral_pic$CI95[,2] - litter_ancestral_pic$CI95[,1]
node_values_3 = c( rep(NA, nrow(charstate)), interval_width_pic )
kable( data.frame( node = seq(1, length(node_values_3)), width=node_values_3 ) )
intervaltree_pic = ggtree(tree_global, layout = 'circular') +
geom_nodepoint(  aes(color=node_values_3), size=3, alpha=1 )
intervaltree_pic
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
library(tidyverse)
library(magrittr)
tree_global = read.tree('RAxML_bipartitions.result_FIN4_raw_rooted_wBoots_4098mam1out_OK.newick')
n_tips = length(tree_global$tip.label)
root_node = tree_global$edge[(!tree_global$edge[,1] %in% tree_global$edge[,2]),1] %>% unique()
root_age = max( dist.nodes(tree_global)[,root_node] )
label_offset = 0.02 * root_age
tree_width = 5 * root_age
globaltree = ggtree(tree_global, layout = 'circular' ) +
geom_tiplab( fontface = "italic", size= 1.5, offset = 0.005) +
xlim(0, 1.2) +
globaltree
globaltree = ggtree(tree_global, layout = 'circular' ) +
geom_tiplab( fontface = "italic", size= 1.5, offset = 0.005) +
xlim(0, 1.2)
globaltree
