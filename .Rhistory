consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree_readin[1], type = 'continuous', method = 'ML')
tree_readin = read.nexus('1028_output.nex')
tree2text = tree_readin[1]
tree2 = tree.read(text = tree2text)
tree_readin = read.nexus('1028_output.nex')
tree2text = tree_readin[1]
tree2 = read.tree(text = tree2text)
tree_readin = read.tree('1028_output.nex')
tree_readin = read.nexus.data('1028_output.nex')
tree_readin = read.nexus('1028_output.nex')
tree2 = tree_readin[1]
plot(tree2)
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
tree_readin = read.nexus('1028_output.nex')
tree2 = tree_readin[1]
type(tree2)
tree_readin = read.nexus('1028_output.nex')
tree2 = tree_readin[1]
print(tree2)
plot(tree2)
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
class(tree2)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree_readin[1], type = 'continuous', method = 'ML')
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree_readin[1], type = 'continuous', method = 'ML')
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, consensusTree, type = 'continuous', method = 'ML')
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, consensusTree, type = 'continuous', method = 'ML')
tree_readin = read.nexus('1028_output.nex')
tree2 = random.tree<-sample(tree_readin,size=1)[[1]]
print(tree2)
plot(tree2)
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, consensusTree, type = 'continuous', method = 'ML')
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
print(result)
phenogram(tree2, charstate, spread.labels = TRUE, fsize = 2.5, spread.costs=c(1,0))
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(consensusTree, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
print(result)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
print(result)
charstate = read.csv('1024_MVP.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
tree2_reduced = drop.tip(tree2, c("Lagidium_wolffsohni", "Cavia_magna", "Galea_flavidens", "Kerodon_acrobata", "Lagostomus_crassus") )
plot(tree2_reduced)
length(tree2_reduced$tip.label)
length(tree2_reduced)
length(charstate)
plotTree(tree2_reduced, type = 'fan', ftype = 'i', fsize = 2.5)
result = ace(charstate, tree2_reduced, type = 'continuous', method = 'ML')
tree_readin = read.nexus('1024_output.nex')
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
tree2text ='((((((Kerodon_rupestris:2.65964806,Kerodon_acrobata:2.65964806):7.070655198,(Hydrochoerus_isthmius:0.9624628885,Hydrochoerus_hydrochaeris:0.9624628885):8.767839833):3.2167183,(Dolichotis_salinicola:8.269430019,Dolichotis_patagonum:8.269430019):4.677589928):4.165517547,((Galea_spixii:6.674462226,(Galea_musteloides:1.345614929,Galea_flavidens:1.3456149831000002):5.328847028):8.305844735,((Microcavia_niata:3.398037325,(Microcavia_australis:2.535517406,Microcavia_shiptoni:2.535517406):0.8625201877):8.568604799,(((((Cavia_intermedia:0.1628145168,Cavia_porcellus:0.1628145168):1.565624154,Cavia_tschudii:1.728438563):0.7877033995,Cavia_aperea:2.5161419629):0.6025356013,Cavia_fulgida:3.118677027):0.7364220485,Cavia_magna:3.855099612):8.111542512):3.013667522):2.132229996):21.43150812,((Lagostomus_maximus:15.19210898,Lagostomus_crassus:15.19210898):2.855989465,((Chinchilla_lanigera:1.395390122,Chinchilla_chinchilla:1.395390122):7.098549606,((Lagidium_wolffsohni:2.326574646,Lagidium_viscacia:2.326574646):0.1289180577,Lagidium_peruanum:2.455492569):6.03844689):9.554157105):20.495953081999996):32.9339615665,(Castor_fiber:4.629479899,Castor_canadensis:4.629479899):66.8485303);'
tree2 = read.tree(text = tree2text)
plot(tree2)
charstate = read.csv('1024_MVP.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
tree2_reduced = drop.tip(tree2, c("Lagidium_wolffsohni", "Cavia_magna", "Galea_flavidens", "Kerodon_acrobata", "Lagostomus_crassus") )
plot(tree2_reduced)
length(tree2_reduced$tip.label)
length(tree2_reduced)
length(charstate)
plotTree(tree2_reduced, type = 'fan', ftype = 'i', fsize = 2.5)
result = ace(charstate, tree2_reduced, type = 'continuous', method = 'ML')
phenogram(tree2_reduced,charstate, spread.labels = TRUE, fsize = 2.5, spread.costs=c(1,0))
contresult = contMap(tree2_reduced, charstate, plot = FALSE)
plot(contresult, lwd = 20, legend = 0.7 * max(nodeHeights(tree2_reduced)), fsize = c(2, 2))
contresult = contMap(tree2, charstate, plot = FALSE)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
tree_readin = read.nexus('1028_output.nex')
tree2 = random.tree<-sample(tree_readin,size=1)[[1]]
print(tree2)
plot(tree2)
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
contresult = contMap(tree2, charstate, plot = FALSE)
contresult = contMap(tree2, charstate, plot = FALSE)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
contresult = contMap(tree2, charstate, plot = FALSE)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
charstate = read.csv('1024_MVP.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
tree2_reduced = drop.tip(tree2, c("Lagidium_wolffsohni", "Cavia_magna", "Galea_flavidens", "Kerodon_acrobata", "Lagostomus_crassus") )
plot(tree2_reduced)
length(tree2_reduced$tip.label)
length(tree2_reduced)
length(charstate)
plotTree(tree2_reduced, type = 'fan', ftype = 'i', fsize = 2.5)
result = ace(charstate, tree2_reduced, type = 'continuous', method = 'ML')
tree_readin = read.nexus('1024_output.nex')
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
tree2text ='((((((Kerodon_rupestris:2.65964806,Kerodon_acrobata:2.65964806):7.070655198,(Hydrochoerus_isthmius:0.9624628885,Hydrochoerus_hydrochaeris:0.9624628885):8.767839833):3.2167183,(Dolichotis_salinicola:8.269430019,Dolichotis_patagonum:8.269430019):4.677589928):4.165517547,((Galea_spixii:6.674462226,(Galea_musteloides:1.345614929,Galea_flavidens:1.3456149831000002):5.328847028):8.305844735,((Microcavia_niata:3.398037325,(Microcavia_australis:2.535517406,Microcavia_shiptoni:2.535517406):0.8625201877):8.568604799,(((((Cavia_intermedia:0.1628145168,Cavia_porcellus:0.1628145168):1.565624154,Cavia_tschudii:1.728438563):0.7877033995,Cavia_aperea:2.5161419629):0.6025356013,Cavia_fulgida:3.118677027):0.7364220485,Cavia_magna:3.855099612):8.111542512):3.013667522):2.132229996):21.43150812,((Lagostomus_maximus:15.19210898,Lagostomus_crassus:15.19210898):2.855989465,((Chinchilla_lanigera:1.395390122,Chinchilla_chinchilla:1.395390122):7.098549606,((Lagidium_wolffsohni:2.326574646,Lagidium_viscacia:2.326574646):0.1289180577,Lagidium_peruanum:2.455492569):6.03844689):9.554157105):20.495953081999996):32.9339615665,(Castor_fiber:4.629479899,Castor_canadensis:4.629479899):66.8485303);'
tree2 = read.tree(text = tree2text)
plot(tree2)
charstate = read.csv('1024_MVP.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
charstate
tree2_reduced = drop.tip(tree2, c("Lagidium_wolffsohni", "Cavia_magna", "Galea_flavidens", "Kerodon_acrobata", "Lagostomus_crassus") )
plot(tree2_reduced)
length(tree2_reduced$tip.label)
length(tree2_reduced)
length(charstate)
plotTree(tree2_reduced, type = 'fan', ftype = 'i', fsize = 2.5)
result = ace(charstate, tree2_reduced, type = 'continuous', method = 'ML')
phenogram(tree2_reduced,charstate, spread.labels = TRUE, fsize = 2.5, spread.costs=c(1,0))
contresult = contMap(tree2_reduced, charstate, plot = FALSE)
plot(contresult, lwd = 20, legend = 0.7 * max(nodeHeights(tree2_reduced)), fsize = c(2, 2))
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
tree_readin = read.nexus('1028_output.nex')
tree2 = random.tree<-sample(tree_readin,size=1)[[1]]
print(tree2)
plot(tree2)
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
contresult = contMap(tree2, charstate, plot = FALSE)
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
class(tree_readin)
class(tree2)
class(consensusTree)
length(tree2$tip.label)
length(tree2)
length(charstate)
plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
contresult = contMap(tree2, charstate, plot = FALSE)
plot(contresult, lwd = 20, legend = 0.7 * max(nodeHeights(tree2_reduced)), fsize = c(2, 2))
contresult = contMap(tree2, charstate, plot = FALSE)
plot(contresult, lwd = 10, legend = 0.7 * max(nodeHeights(tree2_reduced)), fsize = c(1, 1))
contresult = contMap(tree2, charstate, plot = FALSE)
plot(contresult, lwd = 3, legend = 0.7 * max(nodeHeights(tree2_reduced)), fsize = c(1, 1))
contresult = contMap(tree2, charstate, plot = FALSE)
plot(contresult, lwd = 3, legend = 0.7 * max(nodeHeights(tree2)), fsize = c(0.5, 0.5), outline = 0)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
# Some mammal data from http://esapubs.org/archive/ecol/E090/184/#data
D = data.frame(
species = c("Balaenoptera_musculus", "Equus_hemionus", "Dasypus_novemcinctus", "Corynorhinus_townsendii", "Homo_sapiens", "Lepus_europaeus", "Loxodonta_africana", "Macropus_giganteus", "Mus_musculus", "Ornithorhynchus_anatinus", "Panthera_leo"),
mass = c(154321304.50, 235248.07, 3949.01, 10.30, 58540.63, 3816.43, 3824539.93, 33409.89, 19.30, 1484.25, 158623.93),
gestation = c(41.99, 19.60, 274.78, 346.00, 326.97, 108.74, 67.49, 660.00, 134.00, 36.56, 12.48)
)
# A function for pretty formatting of data in tables
kable(D)
contresult = contMap(tree2, charstate, plot = FALSE)
plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
phylo.heatmap(tree2, charstate, standardize = TRUE)
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
print(charstate)
phylo.heatmap(tree2, charstate, standardize = TRUE)
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
print(charstate)
dotTree(tree2, charstate, standardize = TRUE)
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
kable(charstate)
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italit', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 3, alpha =1 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 3, alpha =1 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x, shape = c), size = 10, alpha =1 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10, alpha =1 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = (10 * x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = (10 %*% x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = 10*x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(x, color = "smooth", size = 10 )
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(colour = x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(iris, aes(colour = x), size = 10 )
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 ) +
scale_color_gradient(low = "blue", high = "yellow")
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 ) +
scale_color_gradient(low = "blue", high = "yellow")
contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 ) +
scale_color_continuous(low = "blue", high = "yellow")
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
tree_readin = read.nexus('1028_output.nex')
tree2 = random.tree<-sample(tree_readin,size=1)[[1]]
#print(tree2)
#plot(tree2)
consensusTree = consensus(tree_readin, p = 0.5, check.labels = FALSE)
plot(consensusTree)
# Character state matrix
charstate = read.csv('1028_MVP2.csv', row.names = 1)
charstate = as.matrix(charstate)[,1]
#plotTree(tree2, type = 'fan', ftype = 'i', fsize = 1)
result = ace(charstate, tree2, type = 'continuous', method = 'ML')
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 ) +
scale_color_continuous(low = "blue", high = "yellow")
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 ) +
litter_plot
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 ) +
litter_plot
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
#contresult = contMap(tree2, charstate, plot = FALSE)
#plot(contresult, lwd = 5, legend = 0.7 * max(nodeHeights(tree2)),outline = 0) # fsize = c(0.5, 0.5)
litter_plot = ggtree(tree2) %<+% D +
geom_tiplab( fontface = 'italic', offset = 20) +
xlim(0, 300) +
geom_tippoint(aes(color = x), size = 10 )
litter_plot
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(ggtree)
library(knitr)
library(phytools)
library(tidyverse)
library(magrittr)
tree_global = read.tree('RAxML_bipartitions.result_FIN4_raw_rooted_wBoots_4098mam1out_OK.newick')
n_tips = length(tree_global$tip.label)
root_node = tree_global$edge[(!tree_global$edge[,1] %in% tree_global$edge[,2]),1] %>% unique()
root_age = max( dist.nodes(tree_global)[,root_node] )
label_offset = 0.05 * root_age
tree_width = 1.5 * root_age
# ggtree_global = ggtree(tree_global, lwd = 0.1) +
#   geom_tiplab( fontface = "italic", offset = label_offset, size = 2) +
#   xlim(0, tree_width)
#
# ggtree_global
## drop all the non-relevant tips
charstate = read.csv('1111_FP_upTo1200.csv') %>%
mutate(Average = as.numeric(Average))
tips <- tree_global$tip.label
tips_short = str_replace(tips, "[A-Z_]+$", "")
tree_global$tip.label = tips_short
charstate
tip_names = data.frame(Name_long=tips, Name=tips_short)
charstate %<>% left_join(tip_names)
missing_in_charstate = tree_global$tip.label[! tree_global$tip.label %in% charstate$Name]
tree_global = ape::drop.tip(tree_global, missing_in_charstate)
charstate %<>% filter(!is.na(Name_long))
tree_0 = ggtree(tree_global)
tree_0
# geoData = geoData[ match( row.names(geoData), geoTree$tip.label  ), ]
# charstate
# charstate = charstate[ match(charstate, tree_global$tip.label )]
#
plot(tree_global)
